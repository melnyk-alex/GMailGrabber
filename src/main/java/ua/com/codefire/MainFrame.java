/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package ua.com.codefire;

import java.awt.Color;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.logging.FileHandler;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.internet.InternetAddress;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import ua.com.codefire.gmail.GMailGrab;
import ua.com.codefire.r.R;

/**
 *
 * @author human
 */
public class MainFrame extends javax.swing.JFrame implements WindowListener {

    private static final Logger LOG = Logger.getLogger(MainFrame.class.getName());

    static {
        try {
            LOG.addHandler(new FileHandler("MainFrame.log"));
        } catch (IOException | SecurityException ex) {
            Logger.getLogger(GMailGrab.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
    private boolean status = false;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();

        loadSettings();

        validateFields();

        addWindowListener(this);

        getRootPane().setDefaultButton(jbtnForce);

        setLocationRelativeTo(null);
    }

    private void loadSettings() {
        Properties prop = new Properties();
        try {
            prop.load(R.class.getResourceAsStream("account.properties"));
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, ex.getMessage(), ex);
        }

        jtfUsername.setText(prop.getProperty("username"));
        jpfPassword.setText(prop.getProperty("password"));
        jtfFilePath.setText(prop.getProperty("lastpath"));
    }

    private void saveSettings() {
        Properties prop = new Properties();
        prop.setProperty("username", jtfUsername.getText());
        prop.setProperty("password", String.valueOf(jpfPassword.getPassword()));
        prop.setProperty("lastpath", jtfFilePath.getText());

        try {
            FileOutputStream fos = new FileOutputStream(R.class.getResource("account.properties").getFile());
            prop.store(fos, null);
            fos.close();
        } catch (FileNotFoundException ex) {
            LOG.log(Level.SEVERE, ex.getMessage(), ex);
        } catch (IOException ex) {
            LOG.log(Level.SEVERE, ex.getMessage(), ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jtfUsername = new javax.swing.JTextField();
        jtfFilePath = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jbtnBrowse = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jbtnForce = new javax.swing.JButton();
        jpbStatus = new javax.swing.JProgressBar();
        jpfPassword = new javax.swing.JPasswordField();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtaLog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("GMail :: Grabber");
        setResizable(false);

        jLabel1.setText("Username:");

        jLabel2.setText("Password:");

        jtfFilePath.setEditable(false);

        jLabel3.setText("File to save:");

        jbtnBrowse.setText("Browse");
        jbtnBrowse.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnBrowseActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Lucida Grande", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 102));
        jLabel4.setText("GMail :: Grabber");

        jbtnForce.setText("GET MAILS");
        jbtnForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnForceActionPerformed(evt);
            }
        });

        jpbStatus.setToolTipText("");
        jpbStatus.setDoubleBuffered(true);

        jtaLog.setEditable(false);
        jtaLog.setColumns(20);
        jtaLog.setRows(5);
        jScrollPane1.setViewportView(jtaLog);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jLabel4)
                            .add(jLabel3))
                        .add(143, 214, Short.MAX_VALUE))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jtfUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 200, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel1))
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(layout.createSequentialGroup()
                                .add(jLabel2)
                                .add(0, 0, Short.MAX_VALUE))
                            .add(layout.createSequentialGroup()
                                .add(jpfPassword)
                                .addContainerGap())))
                    .add(layout.createSequentialGroup()
                        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                            .add(jScrollPane1)
                            .add(jSeparator2)
                            .add(layout.createSequentialGroup()
                                .add(jtfFilePath)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jbtnBrowse))
                            .add(layout.createSequentialGroup()
                                .add(jbtnForce)
                                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                .add(jpbStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)))
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel4)
                .add(18, 18, 18)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtfUsername, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jpfPassword, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jLabel3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jtfFilePath, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jbtnBrowse))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 10, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(jpbStatus, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jbtnForce))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnBrowseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnBrowseActionPerformed
        JFileChooser jFileChooser = new JFileChooser(System.getProperty("user.home"));

        if (jFileChooser.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            jtfFilePath.setText(jFileChooser.getSelectedFile().getPath());
        }

        validateFields();
    }//GEN-LAST:event_jbtnBrowseActionPerformed
    private Thread currentThread = null;

    private void jbtnForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnForceActionPerformed
        if (status) {
            while (!currentThread.isInterrupted()) {
                currentThread.interrupt();
            }
            setStatus(false);
        } else {
            setStatus(true);

            currentThread = new Thread() {
                @Override
                public void run() {
                    jtaLog.setText(null);
                    try {
                        jtaLog.append("Connect...\n");
                        GMailGrab gMailGrab = new GMailGrab(jtfUsername.getText(), String.valueOf(jpfPassword.getPassword()));

                        jtaLog.append("Get messages...\n");
                        LOG.log(Level.INFO, "Get messages...");
                        List<Message> messages = gMailGrab.getMessages();
                        jtaLog.append(String.format("Total messages: %s\n", messages.size()));

                        jtaLog.append("Getting e-mail's...\n");
                        LOG.log(Level.INFO, "Getting emails...");
                        Set<InternetAddress> addresses = gMailGrab.retriveMails(messages);
                        jtaLog.append(String.format("Total e-mail's: %s\n", addresses.size()));
                        LOG.log(Level.INFO, String.format("Total e-mail's: %s", addresses.size()));

                        jtaLog.append("Write file...\n");
                        LOG.log(Level.INFO, "Write file...");
                        StringBuilder sb = new StringBuilder();

                        for (InternetAddress addr : addresses) {
                            sb.append(addr.getAddress()).append("\n");
                        }

                        try (FileOutputStream fos = new FileOutputStream(new File(jtfFilePath.getText()))) {
                            fos.write(sb.toString().getBytes());
                        }

                        LOG.log(Level.INFO, "Complete!");
                        JOptionPane.showMessageDialog(rootPane, "Proccess complete!");
                    } catch (IOException | MessagingException ex) {
                        jtaLog.append(ex.getMessage());
                        LOG.log(Level.SEVERE, ex.getMessage(), ex);
                    }

                    setStatus(false);
                }
            };
            currentThread.start();
        }
    }//GEN-LAST:event_jbtnForceActionPerformed

    public void setStatus(boolean flag) {
        status = flag;

        // Text fields
        jtfUsername.setEnabled(!status);
        jpfPassword.setEnabled(!status);
        jtfFilePath.setEnabled(!status);
        // Buttons
        jbtnBrowse.setEnabled(!status);
        
        if (status) {
            jbtnForce.setText("STOP");
            jbtnForce.setForeground(Color.red);
        } else {
            jbtnForce.setText("GET MAILS");
            jbtnForce.setForeground(Color.black);
        }
        // Progress
        jpbStatus.setIndeterminate(status);
    }

    private void validateFields() {
        boolean flag = (jtfUsername.getText().isEmpty() || String.valueOf(jpfPassword.getPassword()).isEmpty() || jtfFilePath.getText().isEmpty());

        jbtnForce.setEnabled(!flag);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JButton jbtnBrowse;
    private javax.swing.JButton jbtnForce;
    private javax.swing.JProgressBar jpbStatus;
    private javax.swing.JPasswordField jpfPassword;
    private javax.swing.JTextArea jtaLog;
    private javax.swing.JTextField jtfFilePath;
    private javax.swing.JTextField jtfUsername;
    // End of variables declaration//GEN-END:variables

    @Override
    public void windowOpened(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowClosing(WindowEvent e) {
        saveSettings();
    }

    @Override
    public void windowClosed(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowIconified(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeiconified(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowActivated(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void windowDeactivated(WindowEvent e) {
//        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
